import { Injectable } from '@angular/core';                    // Importa el decorador Injectable para que Angular pueda inyectar este servicio.
import { BehaviorSubject, Observable } from 'rxjs';            // Importa BehaviorSubject y Observable de RxJS para manejar estado reactivo.

@Injectable({                                                   // Declara que esta clase es inyectable por el sistema de DI de Angular.
  providedIn: 'root'                                           // Registra el servicio en el inyector raíz (singleton en toda la app).
})
export class ModalService {                                    // Define la clase del servicio que exportamos para usar en otros sitios.
  // Subject para controlar la visibilidad del modal
  private showModalSubject = new BehaviorSubject<boolean>(false); // Crea un BehaviorSubject booleano con valor inicial false (modal cerrado).

  private currentGameId: string | null = null;                 // Guarda un ID de juego actual; puede ser string o null.

  setCurrentGameId(gameId: string) {                           // Método para establecer el ID de juego actual...
    this.currentGameId = gameId;                               // ...simplemente asigna el valor recibido.
  }

  getCurrentGameId(): string | null {                          // Método para leer el ID de juego actual...
    return this.currentGameId;                                 // ...devuelve el valor almacenado (o null).
  }
  
  // Subject para manejar los datos de los jugadores
  private playersSubject = new BehaviorSubject<{               // BehaviorSubject que guarda el estado de jugadores como objeto tipado.
    names: string[],                                           // Arreglo con los nombres de los jugadores.
    count: number                                              // Cantidad de jugadores.
  }>({ names: [], count: 0 });                                 // Estado inicial: sin nombres y conteo 0.

  // Exponer como Observables públicos
  public showModal$: Observable<boolean> =                     // Observable público (solo lectura externa) de la visibilidad del modal.
    this.showModalSubject.asObservable();                      // Exponemos como Observable para no permitir next() desde fuera del servicio.

  public players$: Observable<{names: string[], count: number}> = // Observable público del estado de jugadores.
    this.playersSubject.asObservable();                        // También expuesto como solo lectura externa.

  private scoreModalSubject = new BehaviorSubject<boolean>(false); // Segundo modal (por ejemplo, marcador/puntaje), inicia cerrado.
  public scoreModal$ = this.scoreModalSubject.asObservable();  // Observable público para ese segundo modal.

  constructor() {}                                             // Constructor vacío; Angular lo usa para inyección si hace falta.

  openScoreModal(): void {                                     // Abre el modal de puntaje...
    this.scoreModalSubject.next(true);                         // ...emitiendo true a los suscriptores.
  }

  closeScoreModal(): void {                                    // Cierra el modal de puntaje...
    this.scoreModalSubject.next(false);                        // ...emitiendo false.
  }

  // Métodos para controlar el modal
  openModal(): void {                                          // Abre el modal principal...
    this.showModalSubject.next(true);                          // ...emitiendo true.
  }

  closeModal(): void {                                         // Cierra el modal principal...
    this.showModalSubject.next(false);                         // ...emitiendo false.
  }

  // Métodos para manejar los jugadores
  setPlayers(names: string[], count: number): void {           // Reemplaza el estado de jugadores por completo...
    this.playersSubject.next({ names, count });                // ...emitiendo un nuevo objeto con nombres y conteo.
  }

  getCurrentPlayers(): {names: string[], count: number} {      // Devuelve el valor actual de players de forma síncrona...
    return this.playersSubject.value;                          // ...usando .value del BehaviorSubject (último emitido).
  }

  // Limpiar datos
  resetPlayers(): void {                                       // Restaura el estado de jugadores al valor inicial...
    this.playersSubject.next({ names: [], count: 0 });         // ...sin nombres y conteo 0.
  }
}
